#!/bin/bash

SCALA_VERSION=2.9.1

# Figure out where the Scala framework is installed
FWDIR="$(cd `dirname $0`; pwd)"

# Export this as SPARK_HOME
export SPARK_HOME="$FWDIR"

# Load environment variables from conf/spark-env.sh, if it exists
if [ -e $FWDIR/conf/spark-env.sh ] ; then
  . $FWDIR/conf/spark-env.sh
fi

# Check that SCALA_HOME has been specified
if [ -z "$SCALA_HOME" ]; then
  echo "SCALA_HOME is not set" >&2
  exit 1
fi

# If the user specifies a Mesos JAR, put it before our included one on the classpath
MESOS_CLASSPATH=""
if [ -z "$MESOS_JAR" ] ; then
  MESOS_CLASSPATH="$MESOS_JAR"
fi

# Figure out how much memory to use per executor and set it as an environment
# variable so that our process sees it and can report it to Mesos
if [ -z "$SPARK_MEM" ] ; then
  SPARK_MEM="512m"
fi
export SPARK_MEM

# Set JAVA_OPTS to be able to load native libraries and to set heap size
JAVA_OPTS="$SPARK_JAVA_OPTS"
JAVA_OPTS+=" -Djava.library.path=$SPARK_LIBRARY_PATH"
JAVA_OPTS+=" -Xms$SPARK_MEM -Xmx$SPARK_MEM"
# Load extra JAVA_OPTS from conf/java-opts, if it exists
if [ -e $FWDIR/conf/java-opts ] ; then
  JAVA_OPTS+=" `cat $FWDIR/conf/java-opts`"
fi
export JAVA_OPTS

CORE_DIR="$FWDIR/core"
REPL_DIR="$FWDIR/repl"
EXAMPLES_DIR="$FWDIR/examples"
BAGEL_DIR="$FWDIR/bagel"

# Build up classpath
CLASSPATH="$SPARK_CLASSPATH"
CLASSPATH+=":$MESOS_CLASSPATH"
CLASSPATH+=":$FWDIR/conf"
CLASSPATH+=":$CORE_DIR/target/scala-$SCALA_VERSION/classes"
CLASSPATH+=":$CORE_DIR/target/scala-$SCALA_VERSION/test-classes"
CLASSPATH+=":$CORE_DIR/src/main/resources"
CLASSPATH+=":$REPL_DIR/target/scala-$SCALA_VERSION/classes"
CLASSPATH+=":$EXAMPLES_DIR/target/scala-$SCALA_VERSION/classes"
for jar in `find $CORE_DIR/lib -name '*jar'`; do
  CLASSPATH+=":$jar"
done
for jar in `find $FWDIR/lib_managed/jars -name '*jar'`; do
  CLASSPATH+=":$jar"
done
for jar in `find $FWDIR/lib_managed/bundles -name '*jar'`; do
  CLASSPATH+=":$jar"
done
for jar in `find $REPL_DIR/lib -name '*jar'`; do
  CLASSPATH+=":$jar"
done
CLASSPATH+=":$BAGEL_DIR/target/scala-$SCALA_VERSION/classes"
export CLASSPATH # Needed for spark-shell

# Figure out whether to run our class with java or with the scala launcher.
# In most cases, we'd prefer to execute our process with java because scala
# creates a shell script as the parent of its Java process, which makes it
# hard to kill the child with stuff like Process.destroy(). However, for
# the Spark shell, the wrapper is necessary to properly reset the terminal
# when we exit, so we allow it to set a variable to launch with scala.
if [ "$SPARK_LAUNCH_WITH_SCALA" == "1" ]; then
  RUNNER="${SCALA_HOME}/bin/scala"
  EXTRA_ARGS=""     # Java options will be passed to scala as JAVA_OPTS
else
  CLASSPATH+=":$SCALA_HOME/lib/scala-library.jar"
  CLASSPATH+=":$SCALA_HOME/lib/scala-compiler.jar"
  CLASSPATH+=":$SCALA_HOME/lib/jline.jar"
  if [ -n "$JAVA_HOME" ]; then
    RUNNER="${JAVA_HOME}/bin/java"
  else
    RUNNER=java
  fi
  # The JVM doesn't read JAVA_OPTS by default so we need to pass it in
  EXTRA_ARGS="$JAVA_OPTS"
fi

exec "$RUNNER" -cp "$CLASSPATH" $EXTRA_ARGS "$@"
